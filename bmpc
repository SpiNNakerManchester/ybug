#!/usr/bin/perl

##------------------------------------------------------------------------------
##
## bmpc		    An application for controlling BMPs
##
## Copyright (C)    The University of Manchester - 2009-2013
##
## Author           Steve Temple, APT Group, School of Computer Science
## Email            temples@cs.man.ac.uk
##
##------------------------------------------------------------------------------


use strict;
use warnings;

use Time::HiRes;
use String::CRC32;

use SpiNN::CLI;
use SpiNN::Cmd;
use SpiNN::Util qw/read_file hex_dump parse_bits/;


#-------------------------------------------------------------------------------


my $version = "1.30";

my $bmp;		# SpiNN::Cmd object for BMP
my $cli;		# SpiNN::CLI object

my $debug = 0;		# Enable verbosity
my $readline = 1;	# Use readline

my $bmp_target;		# BMP host name

my $bmp_port  = 17893;	# UDP port for BMP
my $TUBE_PORT = 17892;	# UDP port for Tubotron

my ($chip_x, $chip_y, $cpu) = (0, 0, 0);


#-------------------------------------------------------------------------------


my $CMD_BMP_INFO = 48;
my $CMD_FLASH_COPY = 49;
my $CMD_FLASH_ERASE = 50;
my $CMD_FLASH_WRITE = 51;
my $CMD_BMP_SF = 53;
my $CMD_BMP_EE = 54;
my $CMD_RESET = 55;
my $CMD_XILINX = 56;
my $CMD_POWER = 57;

#-------------------------------------------------------------------------------


sub cmd_xboot
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $file = $cli->{arg_v}->[0];

    if ($ac == 0)
    {
	my $data;
	eval { $data = $bmp->read (0x1000, 2048); };
	return $@ if $@;

	for (my $i = 0; $i < 16; $i++)
	{
	    my ($type, $size, $flags, $time, $crc, $base, $length,
		$p0, $p1, $p2, $data) =
		    unpack "C2 v V7 a96", substr $data, 128*$i, 128;

	    next if $type != 3;

	    printf "%3d: Type %d, Flags 0x%04x\n", $i, $type, $flags;
	    printf "     Base 0x%06x, Length %6d, CRC 0x%08x\n", $base, $length, $crc;
	    printf "     Written %s\n", scalar localtime $time;
	    printf "     ModTime %s\n", scalar localtime $p0;
	    printf "     File    %s\n", $data;
	}
	return "";
    }

    return "bad args" if $ac != 1;

    open my $fh, '<', $file or return "can't open \"$file\"";

    my $crc = crc32 ($fh);
    seek $fh, 0, 0;	# Just in case...

    my @stat = stat $fh;

    printf "Copying to Serial Flash\n";

    my $length = $stat[7];
    my $mtime = $stat[9];
    my $count = 0;
    my $base = 0x10000;
    my $data;

    eval
    {
	my $addr = $base;

	while (1)
	{
	    my $len = sysread $fh, my $buf, 256;
	    last if $len <= 0;

	    $bmp->scp_cmd ($CMD_BMP_SF,
			   arg1 => $addr,
			   arg2 => 256,
			   arg3 => 1,
			   data => $buf);

	    $addr += 256;
	    $count += 256;
	    next if $cli->{quiet};
	    print "\rByte $count" if ($count % 10240) == 0;
	}

	print "\rSent $length bytes\n";
	printf "Checking Serial Flash CRC - 0x%08x\n", $crc;

	$data = $bmp->scp_cmd ($CMD_BMP_SF,
			       arg1 => $base,
			       arg2 => $length,
			       arg3 => 2,
			       timeout => 2,
			       unpack => "V");
    };

    close $fh;

    return $@ if $@;

    return sprintf "CRC error - 0x%08x\n", $data->[0] if $data->[0] != $crc;

    my $size = length $file;
    if ($size > 96)
    {
	$file = substr $file, 0, 96;
	$size = 96;
    }

    my ($type, $flags) = (3, 7);
    my $time = time ();

    my $xboot = pack "C2 v V7 a96", $type, $size, $flags, $time, $crc,
      $base, $length, $mtime, 0xffffffff, 0xffffffff, $file;

    print "Updating Flash Data sector\n";

    my ($flash, $offset) = (0x1000, 0x0100);

    eval
    {
	my $data = $bmp->read ($flash, 4092);	# Read existing data

	substr $data, $offset, 128, $xboot;	# Replace XBoot data
	$data .= pack "V", ~crc32 ($data);	# and append CRC

	my $t = $bmp->scp_cmd ($CMD_FLASH_ERASE,	# Erase sector
			       arg1 => 0x1000,
			       arg2 => 0x2000,
			       unpack => "V");

	$bmp->write ($t->[0], $data);	# Put updated data in buffer

	$bmp->scp_cmd ($CMD_FLASH_WRITE,	# Write back to flash
		       arg1 => $flash,
		       arg2 => 4096);
    };

    return $@;
}


sub cmd_xload
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $file = $cli->{arg_v}->[0];
    my $count = 0;

    return "bad args" if $ac != 1;

    open my $fh, '<', $file or return "can't open \"$file\"";

    my $time = Time::HiRes::time;

    eval
    {
	$bmp->scp_cmd ($CMD_XILINX,	# Reset FPGAs
		       arg1 => 1,
		       arg2 => 7);

	while (1)
	{
	    my $len = sysread $fh, my ($buf), 256;
	    last if $len <= 0;

	    $bmp->scp_cmd ($CMD_XILINX,
			   arg1 => 0,
			   arg2 => $len,
			   data => $buf);

	    $count += $len;

	    next if $cli->{quiet};
	    print "\rByte $count" if ($count % 10240) == 0;
	}
    };

    $time = Time::HiRes::time - $time;

    close $fh;
    printf "\rSent $count bytes (%d bytes/sec)\n", $count / $time;

    return $@;
}


sub cmd_adc
{
#    my @adc_n = ("V12d", "V12c", "V12b", "V12a", "V18", "V25", "V33", "VPWR");
    my @adc_n = ("", "V12c", "V12b", "V12a", "V18", "", "V33", "VPWR");
    my @adc_t = (2400, 2400, 2400, 2400, 2400, 3020, 3600, 14400);

    eval
    {
	my $data = $bmp->scp_cmd ($CMD_BMP_INFO,
				  arg1=> 3,
				  unpack => "v8");

	for (my $i = 0; $i < 8; $i++)
	{
	    my $v = $data->[$i] * 2500 / 4096;
	    $v = $v * $adc_t[$i] / 2400;
	    my $name = $adc_n[$i];
	    next unless $name;
	    printf "%4s %5.2f\n", $name, $v / 1000;
	}
    };

    return $@;
}


sub cmd_ee_read
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $addr = $cli->{arg_x}->[0];

    $addr = 0 if $ac < 1;

    eval
    {
	my $data = $bmp->scp_cmd ($CMD_BMP_EE,
				  arg1 => $addr,
				  arg2 => 256,
				  arg3 => 0);

	print hex_dump ($data, addr => $addr);
    };

    return $@;
}


sub number
{
    my $arg = shift;

    return undef unless defined $arg;
    return $arg + 0 if $arg =~ /^\d+$/;
    return oct $arg if $arg =~ /^0x[0-9a-fA-F]+/;
    return oct $arg if $arg =~ /^0b[0-1]+/;
    return time () if $arg eq "unix_time";
    return undef;
}


sub cmd_ee_data
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $file = $cli->{arg_v}->[0];

    if ($ac == 0)
    {
	eval
	{
	    my $data = $bmp->scp_cmd ($CMD_BMP_EE,
				      arg1 => 0,
				      arg2 => 256,
				      arg3 => 0);

	    my @d   = unpack "C4 V C4 C C C C", $data;
	    my @int = unpack "C8", substr $data, 32, 8;
	    my @ext = unpack "C8", substr $data, 40, 8;
	    my @fan = unpack "C8", substr $data, 48, 8;

	    print "\n";
	    printf "Type:       0x%02x\n", $d[0];
	    printf "Written:    %s\n", scalar localtime $d[4];
	    printf "SW ver:     %d\n", $d[1];
	    printf "HW ver:     %d\n", $d[2];
	    printf "Frame ID:   %d\n", $d[3];
	    printf "GW addr:    %d.%d.%d.%d\n", @d[5..8];
	    printf "Flags:      0x%02x\n", $d[9];
	    printf "Mask bits:  %d\n", $d[10];
	    printf "MAC byte:   0x%02x\n", $d[11];
	    printf "LCD time:   %d\n", $d[12];
	    $_ *= 16 for @fan;

	    printf "Fan:        %-4d %-4d %-4d %-4d\n", @fan[0..3];
	    printf "            %-4d %-4d %-4d %-4d\n", @fan[4..7];
	    printf "T_int:      %-4d %-4d %-4d %-4d\n", @int[0..3];
	    printf "            %-4d %-4d %-4d %-4d\n", @int[4..7];
	    printf "T_ext:      %-4d %-4d %-4d %-4d\n", @ext[0..3];
	    printf "            %-4d %-4d %-4d %-4d\n", @ext[4..7];
	    print "\n";
	};

	return $@;
    }

    return "bad args" if $ac != 1;

    open my $fh, "<", $file or return "Can't open $file";
    my $buf;

    eval
    {
	while (<$fh>)
	{
	    chomp;
	    s/^\s+|\s+$//g;
	    s/#.*//;
	    next if /^$/;

	    my ($key, @l) = split;
	    my $pack = "C*";
	    my $len = length $buf;

	    for my $v (@l)
	    {
		my $t = $v;
		$v = number ($v);
		die "Bad value \"$t\" (line $.)\n" unless defined $v
	    }

	    if ($key =~ /^(byte|uchar|uint8_t|uint8)$/)
	    {
		$pack = "C*";
	    }
	    elsif ($key =~ /^(half|ushort|uint16_t)$/)
	    {
		$pack = "v*";
		die "Bad align (line $.)\n" unless $len % 2 == 0;
	    }
	    elsif ($key =~ /^(word|uint|uint32_t|uint32)$/)
	    {
		$pack = "V*";
		die "Bad align (line $.)\n" unless $len % 4 == 0;
	    }
	    elsif ($key =~ /^(date|time)$/)
	    {
		$pack = "V";
		die "Bad align (line $.)\n" unless $len % 4 == 0;
		$l[0] = time ();
	    }
	    elsif ($key eq "crc32")
	    {
		$pack = "V";
		die "Bad align (line $.)\n" unless $len % 4 == 0;
		$l[0] = ~crc32 ($buf);
	    }
	    elsif ($key eq "pad")
	    {
		die "Bad args (line $.)" unless $#l == 1;

		my ($limit, $value) = splice @l, 0, 2;

		die "Bad args (line $.)" unless defined $limit && defined $value;
		die "Bad pad size (line $.)\n" if $limit < $len;

		my $count = $limit - $len;
		$buf .= chr ($value) x $count;
	    }
	    elsif ($key eq "align")
	    {
		die "Bad args (line $.)" unless $#l == 1;

		my ($size, $value) = splice @l, 0, 2;

		die "Bad args (line $.)" unless defined $size && defined $value;

		my $count = $size - $len % $size;
		$buf .= chr ($value) x $count;
	    }
	    else
	    {
		die "Bad key \"$key\" (line $.)\n";
	    }

	    $buf .= pack $pack, @l;
	}
    };

    close $fh;
    return $@ if $@;

    eval
    {
	$bmp->scp_cmd ($CMD_BMP_EE,
		       arg1 => 0,	# Address
		       arg2 => 256,	# Length
		       arg3 => 1,	# 1=Write
		       data => $buf);
    };

    return $@;
}


sub cmd_sf_read
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $addr = $cli->{arg_x}->[0];

    $addr = 0 if $ac < 1;

    eval
    {
	my $data = $bmp->scp_cmd ($CMD_BMP_SF,
				  arg1 => $addr,
				  arg2 => 256,
				  arg3 => 0);

	print hex_dump ($data, addr => $addr);
    };


    return '';
}


sub cmd_sf_write
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $file = $cli->{arg_v}->[0];
    my $addr = $cli->{arg_x}->[1];

    return "bad args" if $ac < 2;
    return "address not 4k aligned" unless ($addr & 0xfff) == 0;

    open my $dh, '<', $file or return "can't open \"$file\"";

    my $count = 0;

    eval
    {
	while (1)
	{
	    my $len = sysread $dh, my $buf, 256;

	    last if $len <= 0;

	    $bmp->scp_cmd ($CMD_BMP_SF,
			   arg1 => $addr,
			   arg2 => $len,
			   arg3 => 1,
			   data => $buf);

	    $addr += $len;
	    $count += $len;

	    next if $cli->{quiet};
	    printf "\rByte %d", $count if ($count % 10240) == 0
	}
    };

    close $dh;

    print "\rSent $count bytes\n";

    return 0;
}


sub cmd_ee_write
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $file = $cli->{arg_v}->[0];
    my $addr = $cli->{arg_x}->[1];

    return "bad args" if $ac < 2;
    return "address not 16 byte aligned" unless ($addr & 15) == 0;

    open my $dh, '<', $file or return "can't open \"$file\"";

    eval
    {
	while (1)
	{
	    my $len = sysread $dh, my ($buf), 256;

	    last if $len <= 0;

	    $bmp->scp_cmd ($CMD_BMP_EE,
			   arg1 => $addr,
			   arg2 => 256,
			   arg3 => 1,
			   data => $buf);
	    $addr += 256;
	}
    };

    close $dh;

    return $@;
}


#-------------------------------------------------------------------------------


sub sectors
{
    my ($addr, $end_addr) = @_;
    my ($start, $end);
    my $a = 0;

    my @secs = ((4096) x 16, (32768) x 14);

    for (my $i = 0; $i <= $#secs; $i++)
    {
	$a += $secs[$i];
	$start = $i if ! defined $start && $a > $addr;
	$end = $i if ! defined $end && $a >= $end_addr;
    }

    return ($start, $end);
}



sub cmd_flash_erase
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $from = $cli->{arg_x}->[0];
    my $to = $cli->{arg_x}->[1];

    return "bad args" if $ac != 2;
    return "from >= to" if $from >= $to;
    return "address not in flash" if $to >= 524288;

    printf "Erase 0x%x to 0x%x\n", $from, $to;

    eval
    {
	$bmp->scp_cmd ($CMD_FLASH_ERASE,
		       arg1 => $from,
		       arg2 => $to)
    };

    return $@;
}


sub cmd_flash_write
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $file = $cli->{arg_v}->[0];
    my $addr = $cli->{arg_x}->[1];
    my $opt = $cli->{arg_v}->[1];
    my $update = 0;

    return "bad args" if $ac != 2;
    return "can't read \"$file\"" unless -r $file;
 
    ($addr, $update) = (0x30000, 1) if $opt eq "update";

    return "bad address" unless defined $addr;

    open my $fh, "<", $file or return "can't open \"$file\"";
    my $size = sysread $fh, my ($buffer), 65536;
    close $fh;

    printf "Program from 0x%06x to 0x%06x\n", $addr, $addr + $size;

    eval
    {
	$bmp->flash_write ($addr, $buffer, update => $update);
    };

    print "You'll need to reset now...\n" if $update;

    return $@;
}


#-------------------------------------------------------------------------------


sub check_ip
{
    my $s = shift;
    my $ip = 0;

    return undef unless $s =~ /^\d+\.\d+\.\d+\.\d+$/;

    for my $n (split /\./, $s)
    {
	return undef if $n < 0 || $n > 255;
	$ip = ($ip << 8) + $n;
    }

    return $ip;
}


sub text_ip
{
    my $ip = shift;

    return sprintf "%d.%d.%d.%d", ($ip >> 24) & 255, ($ip >> 16) & 255,
    				 ($ip >> 8) & 255,  $ip & 255;
}


sub ip_text
{
    my ($data, $long) = @_;

    my @d = unpack "v C6 N3 v2 V2", substr $data, 32, 32;

    my $flag = $d[0];
    my $mac = sprintf "%02x:%02x:%02x:%02x:%02x:%02x", @d[1..6];
    my $ip = text_ip ($d[7]);
    my $gw = text_ip ($d[8]);
    my $nm = text_ip ($d[9]);
    my $port = $d[10];

    my $text;

    if ($long)
    {
	$text .= sprintf "Flag: %04x\n", $flag;
	$text .= sprintf "MAC:  %s\n", $mac;
	$text .= sprintf "IP:   %s\n", $ip;
	$text .= sprintf "GW:   %s\n", $gw;
	$text .= sprintf "NM:   %s\n", $nm;
	$text .= sprintf "Port: %d\n", $port;
    }
    else
    {
	$text .= sprintf "%04x ", $flag;
	$text .= sprintf "%s ", $mac;
	$text .= sprintf "%s %s %s ", $ip, $gw, $nm;
	$text .= sprintf "%d\n", $port;
    }

    return $text;
}


sub ip_info
{
    my ($addr, $long) = @_;

    eval
    {
	my $data = $bmp->read ($addr, 128);

	print ip_text ($data, $long);
    };

    return $@;
}


sub cmd_spin_ip
{
    my $cli = shift;
    return ip_init ($cli, 128, 2)
}

sub cmd_bmp_ip
{
    my $cli = shift;
    return ip_init ($cli, 0, 1)
}


sub ip_init
{
    my ($cli, $offset, $type) = @_;
    my $ac = $cli->{arg_c};
    my $arg = $cli->{arg_v}->[0];

    my ($addr, $len) = (0x1000, 128);

    return ip_info ($addr+$offset, 1) if $ac == 0;
    return ip_info ($addr+$offset, 0) if $ac == 1 && $arg eq "*";

    return "bad args" unless $ac == 6;

    my $flag = $cli->{arg_x}->[0];
    my $mac = $cli->{arg_v}->[1];
    my $ip = check_ip ($cli->{arg_v}->[2]);
    my $gw = check_ip ($cli->{arg_v}->[3]);
    my $nm = check_ip ($cli->{arg_v}->[4]);
    my $port = $cli->{arg_n}->[5];

    return "bad flag" unless $flag >= 0x8000 && $flag < 0x10000;
    return "bad MAC" unless $mac =~ /^([0-9a-f]{1,2}:){5}[0-9a-f]{1,2}$/i;
    return "bad IP" unless defined $ip;
    return "bad GW" unless defined $gw;
    return "bad NM" unless defined $gw;
    return "bad port" unless $port >= 1024 && $port < 65536;

    my @mac = split /:/, $mac;
    $_ = hex $_ for @mac;

    my $time = time;
    my $data = pack "v C6 N3 v2 V2 a64", $flag, @mac, $ip, $gw, $nm, $port,
                 0, 0, 0, chr (255) x 64;

    my $fl_dir = pack "C2 v V7", $type, 32, 0, $time, (0xffffffff) x 6;
    $fl_dir .= $data;

    eval
    {
	my $data = $bmp->read ($addr, 4092);	# Read existing data

	substr $data, $offset, $len, $fl_dir;	# Replace IP data
	$data .= pack "V", ~crc32 ($data);	# and append CRC

	print "Erasing sector\n";
	
	my $t = $bmp->scp_cmd ($CMD_FLASH_ERASE,	# Erase sector
			       arg1 => 0x1000,
			       arg2 => 0x2000,
			       unpack => "V");

	$bmp->write ($t->[0], $data);	# Put updated data in buffer

	print "Writing sector\n";

	$bmp->scp_cmd ($CMD_FLASH_WRITE,	# Write back to flash
		       arg1 => $addr,
		       arg2 => 4096);

	print "Reading sector\n";
    
	my $read = $bmp->read ($addr+$offset, $len);	# Read IP data back

	if ($fl_dir ne $read)
	{
	    print "Oops! - try again?\n";
	    print "Wrote\n", hex_dump ($fl_dir), "Read\n", hex_dump ($read);
	}
	else
	{
	    print "Looks OK!\n";
	}
    };

    return $@ ;
}


sub sf_info
{
    my $long = shift;

    eval
    {
	my $data = $bmp->scp_cmd ($CMD_BMP_SF,
				  arg1 => 8,	# address
				  arg2 => 32,	# length
				  arg3 => 0);	# 0=read

	$data = pack "V*", unpack ("N*", $data);

	print ip_info ($data, $long);
    };

    return $@;
}


sub cmd_sf_ip
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $arg = $cli->{arg_v}->[0];

    return sf_info (1) if $ac == 0;
    return sf_info (0) if $ac == 1 && $arg eq "*";
    return "bad args" unless $ac == 6;

    my $flag = $cli->{arg_x}->[0];
    my $mac = $cli->{arg_v}->[1];
    my $ip = check_ip ($cli->{arg_v}->[2]);
    my $gw = check_ip ($cli->{arg_v}->[3]);
    my $nm = check_ip ($cli->{arg_v}->[4]);
    my $port = $cli->{arg_n}->[5];

    return "bad flag" unless $flag >= 0x8000 && $flag < 0x10000;
    return "bad MAC" unless $mac =~ /^([0-9a-f]{1,2}:){5}[0-9a-f]{1,2}$/i;
    return "bad IP" unless defined $ip;
    return "bad GW" unless defined $gw;
    return "bad NM" unless defined $gw;
    return "bad port" unless $port >= 1024 && $port < 65536;

    my @mac = reverse split /:/, $mac;
    $_ = hex $_ for @mac;

    my $pack = pack "N2 C2 n C4 V3 N3 N",
              0x553a0008, 0xf5007fe0, $mac[4], $mac[5], $flag,
              $mac[0], $mac[1], $mac[2], $mac[3],
              $ip, $gw, $nm, $port, 0, 0, 0xaaaaaaaa;

    my ($addr, $len) = (0, length $pack);

    eval
    {
	print "Writing data\n";

	$bmp->scp_cmd ($CMD_BMP_SF,
		       arg1 => $addr,
		       arg2 => $len,
		       arg3 => 1,
		       data => $pack);

	print "Reading data\n";
    
	my $read = $bmp->scp_cmd ($CMD_BMP_SF,
				  arg1 => $addr,
				  arg2 => $len,
				  arg3 => 0);

	if ($pack ne $read)
	{
	    print "Oops! - try again?\n";
	    print "Wrote\n", hex_dump ($pack), "Read\n", hex_dump ($read);
	}
	else
	{
	    print "Looks OK!\n";
	}
    };

    return $@;
}


#-------------------------------------------------------------------------------


sub cmd_serial
{
    eval
    {
	my $data = $bmp->scp_cmd ($CMD_BMP_INFO,
				  arg1 => 0,
				  unpack => "V5");

	printf "\n%08x-%08x-%08x-%08x\n\n", @$data[1..4];
    };

    return $@;
}


sub cmd_ip
{
    eval
    {
	my $can_status = $bmp->scp_cmd ($CMD_BMP_INFO,
					arg1 => 2,
					addr => [0],
					unpack => "C*");

	print "Slot  BMP              SpiNN\n";
	print "----  ---              -----\n";

	for (my $i = 0; $i < 24; $i++)
	{
	    next unless $can_status->[$i];

	    my $data = $bmp->scp_cmd ($CMD_BMP_INFO,
				      arg1 => 4,
				      addr => [$i],
				      unpack => "a32a32");

	    my @bmp_ip = unpack "C4", substr $data->[0], 8, 4;
	    my @spin_ip = unpack "C4", substr $data->[1], 8, 4;
	    my $b = sprintf "%d.%d.%d.%d", @bmp_ip;
	    my $s = sprintf "%d.%d.%d.%d", @spin_ip;
	    printf "%3d   %-16s %-16s\n", $i, $b, $s;
	}
    };

    return $@;
}


#-------------------------------------------------------------------------------


sub cmd_sver
{
    eval
    {
	my $data = $bmp->ver (raw => 1);
	my ($vc, $pc, $cy, $cx, $size, $ver_num, $time, $ver_str) = @$data;
	my ($name, $hw) = split /\//, $ver_str;
	printf "$name %0.2f%s at $hw:$vc (built %s) [CAN=$pc, Frame=$cy]\n",
	  $ver_num / 100, ($cx) ? "e" : "", scalar localtime $time;
    };

    return $@;
}


sub cmd_smemw
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $addr = ($ac >= 1) ? $cli->{arg_x}->[0] : 0;

    eval
    {
	my $data = $bmp->read ($addr, 256, type => "word");
	print hex_dump ($data, addr => $addr, format => "word");
    };

    return $@;
}


sub cmd_smemh
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $addr = ($ac >= 1) ? $cli->{arg_x}->[0] : 0;

    eval
    {
	my $data = $bmp->read ($addr, 256, type => "word");
	print hex_dump ($data, addr => $addr, format => "half");
    };

    return $@;
}


sub cmd_smemb
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $addr = ($ac >= 1) ? $cli->{arg_x}->[0] : 0;

    eval
    {
	my $data = $bmp->read ($addr, 256, type => "byte");
	print hex_dump ($data, addr => $addr);
    };

    return $@;
}


sub cmd_sw
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $addr = $cli->{arg_x}->[0];
    my $data = $cli->{arg_x}->[1];

    return "bad args" unless $ac == 1 || $ac == 2;

    eval
    {
	if ($ac == 1)
	{
	    my $data = $bmp->read ($addr, 4, type => "word", unpack => "V");
	    printf "%08x = %08x\n", $addr, $data->[0];
	}
	else
	{
	    $data = pack "V", $data;
	    $bmp->write ($addr, $data, type => "word");
	}
    };

    return $@;
}


sub cmd_sb
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $addr = $cli->{arg_x}->[0];
    my $data = $cli->{arg_x}->[1];

    return "bad args" unless $ac == 1 || $ac == 2;

    eval
    {
	if ($ac == 1)
	{
	    my $data = $bmp->read ($addr, 1, type => "byte", unpack => "C");
	    printf "%08x = %02x\n", $addr, $data->[0];
	}
	else
	{
	    $data = pack "C", $data;
	    $bmp->write ($addr, $data, type => "byte");
	}
    };

    return $@;
}


sub cmd_sfill
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $from = $cli->{arg_x}->[0];
    my $to = $cli->{arg_x}->[1];
    my $fill = $cli->{arg_x}->[2];

    eval { $bmp->fill ($from, $fill, $to-$from) };

    return $@;
}


sub cmd_sp
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $arg1 = $cli->{arg_v}->[0];
    my $arg2 = $cli->{arg_v}->[1];
    my $arg3 = $cli->{arg_v}->[2];

    return "" if $ac == 0;
    return "bad args" unless $ac == 1 && $arg1 =~ /^\d+$/;

    eval
    {
	($chip_x, $chip_y, $cpu) = $bmp->addr ($arg1);

	$cli->{prompt} =~ s/:.+//;
	$cli->{prompt} .= ":$cpu > ";
    };

    return $@;
}


#-------------------------------------------------------------------------------


sub cmd_iptag
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $host = $cli->{arg_v}->[0];
    my $port = $cli->{arg_n}->[1];
    my $tag = $cli->{arg_n}->[2];

    my $MIN_TAG = 0; # Bodge!
    my $MAX_TAG = 7;

    $port = $TUBE_PORT unless $ac > 1 && defined $port;
    return "bad tag" if $ac == 3 && ($tag < $MIN_TAG || $tag > $MAX_TAG);

    $tag = 0 unless $ac == 3;

    eval
    {
	if ($ac == 0)
	{
	    my $data = $bmp->iptag_tto (255);

	    my ($tto, undef, $pool, $fix) = unpack "C4", $data;
	    my $max = $pool + $fix;
	    $tto = (1 << ($tto - 1)) / 100 if $tto;

	    print "IPTags=$max (F=$fix, T=$pool), TTO=${tto}s\n\n";

	    print "Tag   IP address      Port   T/O   Flags      Count\n";
	    print "---   ----------      ----   ---   -----      -----\n";

	    for (my $i = 0; $i < $max; $i++)
	    {
		my $data = $bmp->iptag_get ($i, 1);

		my ($ip, $mac, $port, $timeout, $flags, $count, $rx_port,
		    $bmp_addr, $bmp_port) = unpack "a4 a6 v3 V v2 C", $data;

		if ($flags & 0x8000) # Tag in use
		{
		    $ip = join ".", unpack "C*", $ip;

		    printf "%3d  %-15s  %5d  %-4s  %04x  %10d\n",
		    $i, $ip, $port, $timeout / 100, $flags, $count;
		}
	    }
	}
	elsif ($ac >= 1 && $host eq "-")
	{
	    my $tag = ($ac == 2) ? $port : 0;
	    die "bad tag\n" if $tag < $MIN_TAG || $tag > $MAX_TAG;

	    $bmp->iptag_clear ($tag);
	}
	else
	{
	    $bmp->iptag_set ($tag, $host, $port);
	}
    };

    return $@;
}

#-------------------------------------------------------------------------------

sub cmd_sload
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $file = $cli->{arg_v}->[0];
    my $addr = $cli->{arg_x}->[1];

    return "bad args" if $ac < 2;

    eval { $bmp->write_file ($addr, $file) };

    return $@;
}


#-------------------------------------------------------------------------------


#!! These need fixing...

sub cmd_reset
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $arg = $cli->{arg_v}->[0];

    my $mask = 1 << $cpu;

    return "BMP not set" unless defined $bmp;

    $mask = parse_bits ($arg, 0, 23) if defined $arg;

    return "bad mask" unless $mask;

    eval
    {
	$bmp->scp_cmd ($CMD_RESET,
		       arg1 => 2,
		       arg2 => $mask);
    };

    return $@;
}


sub cmd_power
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $arg0 = $cli->{arg_v}->[0];
    my $arg1 = $cli->{arg_v}->[1];

    my $mask = 1 << $cpu;

    return "BMP not set" unless defined $bmp;

    return "bad args" if $ac == 0;
    return "bad args" if $ac >= 1 && $arg0 !~ /^on|off$/;

    $mask = parse_bits ($arg1, 0, 23) if defined $arg1;

    return "bad mask" unless $mask;

    eval
    {
	$bmp->scp_cmd ($CMD_POWER,
		       arg1 => ($arg0 eq "on") ? 1 : 0,
		       arg2 => $mask,
		       timeout => ($arg0 eq "on") ? 3.0 : $bmp->timeout);
    };

    return $@;
}


sub old_reset
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $arg = $cli->{arg_v}->[0] || "";

    return "BMP not set" unless defined $bmp;

    return "bad args" if $ac >= 1 && $arg !~ /^all$/;

    eval
    {
	$bmp->scp_cmd ($CMD_RESET,
		       arg1 => 2,
		       arg2 => ($arg eq "all") ? 1 : 0);
    };

    return $@;
}


sub old_power
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $arg0 = $cli->{arg_v}->[0];

    return "BMP not set" unless defined $bmp;

    return "bad args" if $ac == 0;
    return "bad args" if $ac >= 1 && $arg0 !~ /^on|off$/;

    my $on = ($arg0 eq "on") ? 1 : 0;

    eval { $bmp->scp_cmd ($CMD_POWER, arg1 => $on) };

    return $@;
}


#-------------------------------------------------------------------------------


sub cmd_debug
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $d = $cli->{arg_n}->[0];

    $debug = $d if $ac > 0;

    $bmp->debug ($debug);

    print "Debug $debug\n";
    return "";
}


sub cmd_sleep
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $t = $cli->{arg_v}->[0];

    my $time = 1;

    $time = $t if $ac > 0 && $t =~ /^\d+\.?\d*$/;

    select (undef, undef, undef, $time);

    return "";
}


sub cmd_timeout
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $t = $cli->{arg_v}->[0];

    $bmp->timeout ($t) if defined $t && $t =~ /^\d+\.?\d*$/;

    printf "Timeout %s\n", $bmp->timeout;

    return "";
}


sub cmd_cmd
{
    my $cli = shift;
    my $ac = $cli->{arg_c};
    my $cmd = $cli->{arg_n}->[0];
    my $arg1 = $cli->{arg_x}->[1] || 0;
    my $arg2 = $cli->{arg_x}->[2] || 0;
    my $arg3 = $cli->{arg_x}->[3] || 0;
    my $data = $cli->{arg_v}->[4] || "";

    if ($data =~ /^".+"$/)
    {
	$data =~ s/^"|"$//g;
	$data .= "\n" . chr (0);
    }
    else
    {
	my @data = @{$cli->{arg_x}}[4..$ac-1];
	$data = pack "C*", @data;
    }
    
    return "bad args" if $ac < 1;

    eval
    {
	$bmp->scp_cmd ($cmd,
		       arg1 => $arg1,
		       arg2 => $arg2,
		       arg3 => $arg3,
		       data => $data);
    };

    return $@;
}


sub cmd_version
{
    print "# bmpc - version $version\n";

    return "";
}


#-------------------------------------------------------------------------------

my $bmp_cmds =
{
    spin =>       [\&cmd_spin,
		 '',
		 'talk to SpiNNaker'],
    version =>   [\&cmd_version,
		 '',
		 'show bmpc version'],
    debug =>    [\&cmd_debug,
		 '<num.D>',
		 'set debug level'],
    timeout =>  [\&cmd_timeout,
		 '<secs.R>',
		 'set target timeout'],
    sleep =>    [\&cmd_sleep,
		 '<secs.D>',
		 'sleep (secs)'],
    sp =>       [\&cmd_sp,
		 '<chip_x.D> <chip_y.D> <cpu.D>',
		 'select BMP chip'],
    sver =>     [\&cmd_sver,
		 '',
		 'show BMP S/W version'],
    smemb =>    [\&cmd_smemb,
		 '<addr.X>',
		 'read BMP memory (bytes)'],
    smemh =>    [\&cmd_smemh,
		 '<addr.X>',
		 'read BMP memory (half-words)'],
    smemw =>    [\&cmd_smemw,
		 '<addr.X>',
		 'read BMP memory (words)'],
    flash_write => [\&cmd_flash_write,
		 '<file.F> <addr.X> [boot]',
		 'load BMP flash memory from file'],
    flash_erase => [\&cmd_flash_erase,
		 '<from.X> <to.X>',
		 'erase BMP flash memory'],
    xload =>    [\&cmd_xload,
		 '<file.F>',
		 'load FPGAs from file'],
    xboot =>     [\&cmd_xboot,
		 '[<file.F>]',
		 'configure FPGA boot file'],
    sload =>    [\&cmd_sload,
		 '<file.F> <addr.X> [log]',
		 'load BMP memory from file'],
#    srun =>     [\&cmd_srun,
#		 '<addr.X> wait|now|all',
#		 'start BMP execution'],
    sw =>       [\&cmd_sw,
		 '<addr.X> [<data.X>]',
		 'read/write BMP word'],
    sh =>       [\&cmd_sh,
		 '<addr.X> [<data.X>]',
		 'read/write BMP half-word'],
    sb =>       [\&cmd_sb,
		 '<addr.X> [<data.X>]',
		 'read/write BMP byte'],
    sdump =>    [\&cmd_sdump,
		 '<file.F> <addr.X> <len.X>',
		 'dump BMP memory to file'],
    sfill =>     [\&cmd_sfill,
		 '<from_addr.X> <to_addr.X> <data.X>',
		 'fill BMP memory'],
    iptag =>    [\&cmd_iptag,
		 "<name.S> | '.' | '-' | all <port> <tag>",
		 'set up IPTAGs'],
    adc =>      [\&cmd_adc,
		 '',
		 'Read voltages on BMP'],
    cmd =>       [\&cmd_cmd,
		 '<cmd.D> <arg1.X> <arg2.X> <arg3.X>',
		 'User specified command'],
    reset =>     [\&cmd_reset,
		 '[all]',
		 'Reset Spinnakers'],
    ip =>        [\&cmd_ip,
		 '',
		 'Display subrack IP addresses'],
    serial =>     [\&cmd_serial,
		 '',
		 'Read BMP serial number'],
    power =>     [\&cmd_power,
		 'on|off',
		 'Switch power on/off'],
    ee_data => [\&cmd_ee_data,
		 '[<file>]',
		 'display/set BMP backplane EEPROM info'],
    ee_read => [\&cmd_ee_read,
		 '<addr.X>',
		 'read BMP backplane EEPROM data'],
    ee_write => [\&cmd_ee_write,
		 '<file.F> <addr.X>',
		 'write BMP backplane EEPROM data'],
    sf_read => [\&cmd_sf_read,
		 '<addr.X>',
		 'read BMP serial Flash data'],
    sf_write => [\&cmd_sf_write,
		 '<file.F> <addr.X>',
		 'write BMP serial Flash data'],
    sf_ip =>    [\&cmd_sf_ip,
		 '<Flag.X> <MAC.M> <ip_addr.P> <gw_addr.P> <net_mask.P> <port.D>',
		 'Initialise Serial Flash IP addr'],
    bmp_ip =>  [\&cmd_bmp_ip,
		 '<Flag.X> <MAC.M> <ip_addr.P> <gw_addr.P> <net_mask.P> <port.D>',
		 'Initialise BMP Flash IP addr'],
    spin_ip =>  [\&cmd_spin_ip,
		 '<Flag.X> <MAC.M> <ip_addr.P> <gw_addr.P> <net_mask.P> <port.D>',
		 'Initialise Spin Flash IP addr'],
    pause =>    [\&SpiNN::CLI::pause,
		 "<text.S>",
		 "Print string and wait for Enter key"],
    echo =>     [\&SpiNN::CLI::echo,
		 "<text.S>",
		 "Print string"],
    quit =>     [\&SpiNN::CLI::quit,
		 "",
		 "Quit"],
    help =>     [\&SpiNN::CLI::help,
		 "[<command>]",
		 "Provide help"],
    "@" =>      [\&SpiNN::CLI::at,
		 "<file.F> [quiet]",
		 "Read commands from file"],
    "?" =>      [\&SpiNN::CLI::query,
		 "",
		 "List commands"],
};


#-------------------------------------------------------------------------------


sub usage
{
    warn "usage: bmpc <options> <hostname>[:<port>]\n";
    warn "  -version                 - print version number\n";
    warn "  -norl                    - don't use 'readline'\n";
    die  "  -debug                   - set debug variable\n";
}


sub process_args
{
    while ($#ARGV >= 0)
    {
	my $arg = shift @ARGV;

	if ($arg eq "-version")
	{
	    die "bmpc - v$version\n";
	}
	elsif ($arg eq "-debug")
	{
	    die "debug not specified\n" unless $debug = shift @ARGV &&
		$debug =~ /^\d+$/;
	}
	elsif ($arg eq "-norl")
	{
	    $readline = 0;
	}
	elsif ($arg !~ /^-/)
	{
	    $bmp_target = $arg;
	}
	else
	{
	    usage ();
	}
    }

    die "target not specified\n" unless defined $bmp_target;

    $bmp_port = $1 if $bmp_target =~ s/:(\d+)$//;

    my $prompt = $bmp_target;
    $prompt =~ s/\..+// unless $prompt =~ /^\d/;
    $prompt = "$prompt:0 > ";

    return $prompt;
}


sub open_targets
{
    $bmp = SpiNN::Cmd->new (target => $bmp_target,
			     port => $bmp_port,
			     debug => $debug);

    die "Failed to open \"$bmp_target\"\n" unless $bmp;
}


sub init_readline
{
    return undef unless $readline;

    use Term::ReadLine;
    $ENV{PERL_RL} = "Gnu o=0";

    my $term = Term::ReadLine->new ("bmpc");
    my $attribs = $term->Attribs;

    # Perform completion on command keyword at start of line
    # and filename completion otherwise

    $attribs->{completion_function} = sub
    {
	my ($text, $line, $start) = @_;
	return $cli->list if $start == 0;
	return $term->completion_matches ($text,
			   $attribs->{filename_completion_function});
    };

    return $term;
}


sub main
{
    my $prompt = process_args ();

    my $term = init_readline ();

    open_targets ();

    cmd_version ();

    $cli = SpiNN::CLI->new (\*STDIN, $prompt, $bmp_cmds, $term);

    $cli->run;
}


main ();
